#Complete Neural Net operations (Forward and Backward Propogation)
Neural.Net <- function(layers = NULL,inp,out,epoch,step.size = 0.01,error.threshold = 0.01,batch = FALSE,batch.ratio = 0.5,cycles = 3,change.steps = FALSE,step.change = 0.9){
  weights <- create.weights(layers)
  biases <- create.biases(layers)
  if(batch == TRUE){
    for(i in 1:epoch){
      if(change.steps == TRUE){step.size = step.size * step.change}
      sample.rows <- sample(1:nrow(inp),size = batch.ratio*nrow(inp))
      inp.batch <- inp[sample.rows,]
      out.batch <- out[sample.rows,]
      for(cycle in 1:cycles){
        ## Forward Propogation
        net_out <- feedforward(inp.batch,weights,biases)
        ## Back Propogation
        delta <- calculate_delta(net_out,out.batch,weights)
        weights <- updating_weights(weights,inp.batch,delta,net_out,step.size)
        biases <- updating_biases(biases,delta,step.size)
        avg_error <- mean(abs(out.batch - net_out[[length(net_out)]]),na.rm = TRUE)

        ##Printing Output for every epoch
        #cat("\014")
        #cat("------- Feed Forward Neural Nets -------\n")
        #cat("Inputs: ",layers[1],"\n")
        #cat("Outputs: ",layers[length(layers)],"\n")
        #cat("Hidden Layers:", length(layers)-2,"\n")
        cat("\b\b\b\b\b\b\b\r")
        cat(paste("Epoch :",i," Avg_error = ",avg_error))
        #cat("Output Values:\n\n")
        #print(net_out[[length(net_out)]])
        #Sys.sleep(0.002)
        ##
        if(!is.nan(avg_error)){
        if(avg_error <= error.threshold){
          break
        }
        }
       }
    }

  }else{
    for(i in 1:epoch){
      ## Forward Propogation
      if(change.steps == TRUE){step.size = step.size * step.change}
      net_out <- feedforward(inp,weights,biases)
      ## Back Propogation
      delta <- calculate_delta(net_out,out,weights)
      weights <- updating_weights(weights,inp,delta,net_out,step.size)
      biases <- updating_biases(biases,delta,step.size)
      avg_error <- mean(abs(out - net_out[[length(net_out)]]))

      ##Printing Output for every epoch
      #cat("\014")
      #cat("------- Feed Forward Neural Nets -------\n")
      #cat("Inputs: ",layers[1],"\n")
      #cat("Outputs: ",layers[length(layers)],"\n")
      #cat("Hidden Layers:", length(layers)-2,"\n")
      cat("\b\b\b\b\b\b\b\r")
      cat(paste("Epoch :",i," Avg_error = ",avg_error))
      #cat("Output Values:\n\n")
      #print(net_out[[length(net_out)]])
      #Sys.sleep(0.002)
      ##

      if(!is.nan(avg_error)){
        if(avg_error <= error.threshold){
          break
        }
      }
    }
  }
  return(list(weights = weights,biases = biases,Net_out = net_out))
}
